-- MySQL Script generated by MySQL Workbench
-- 05/15/20 20:53:54
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema tempus
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema tempus
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `tempus` DEFAULT CHARACTER SET utf8 ;
USE `tempus` ;

-- -----------------------------------------------------
-- Table `tempus`.`asignatura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`asignatura` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombreCorto` VARCHAR(10) NOT NULL,
  `nombreLargo` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nombre_largo_UNIQUE` (`nombreLargo` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`carrera`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`carrera` (
  `id` VARCHAR(3) NOT NULL,
  `nombreCorto` VARCHAR(10) NOT NULL,
  `nombreLargo` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nombre_largo_UNIQUE` (`nombreLargo` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`aula`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`aula` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  `sector` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `sector_nombre_UNIQUE` (`sector` ASC, `nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`docente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`docente` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`tribunal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`tribunal` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idPresidente` INT NOT NULL,
  `idVocal1` INT NOT NULL,
  `idVocal2` INT NULL,
  `idSuplente` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_tribunal_docente1_idx` (`idPresidente` ASC),
  INDEX `fk_tribunal_docente2_idx` (`idVocal1` ASC),
  INDEX `fk_tribunal_docente3_idx` (`idVocal2` ASC),
  INDEX `fk_tribunal_docente4_idx` (`idSuplente` ASC),
  CONSTRAINT `fk_tribunal_docente1`
    FOREIGN KEY (`idPresidente`)
    REFERENCES `tempus`.`docente` (`id`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tribunal_docente2`
    FOREIGN KEY (`idVocal1`)
    REFERENCES `tempus`.`docente` (`id`)
    ON DELETE NO ACTION
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_tribunal_docente3`
    FOREIGN KEY (`idVocal2`)
    REFERENCES `tempus`.`docente` (`id`)
    ON DELETE NO ACTION
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_tribunal_docente4`
    FOREIGN KEY (`idSuplente`)
    REFERENCES `tempus`.`docente` (`id`)
    ON DELETE NO ACTION
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`llamado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`llamado` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idAula` INT NULL,
  `estado` ENUM('Activo', 'Inactivo') NOT NULL,
  `fecha` DATE NOT NULL,
  `fechaEdicion` DATETIME NULL,
  `hora` TIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_llamado_aula1_idx` (`idAula` ASC),
  CONSTRAINT `fk_llamado_aula1`
    FOREIGN KEY (`idAula`)
    REFERENCES `tempus`.`aula` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`mesa_examen`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`mesa_examen` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idPrimerLlamado` INT NULL,
  `idSegundoLlamado` INT NULL,
  `idTribunal` INT NOT NULL,
  `fechaCreacion` DATETIME NOT NULL,
  `observacion` VARCHAR(300) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_mesa_examen_tribunal1_idx` (`idTribunal` ASC),
  INDEX `fk_mesa_examen_llamado1_idx` (`idPrimerLlamado` ASC),
  INDEX `fk_mesa_examen_llamado2_idx` (`idSegundoLlamado` ASC),
  CONSTRAINT `fk_mesa_examen_tribunal1`
    FOREIGN KEY (`idTribunal`)
    REFERENCES `tempus`.`tribunal` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mesa_examen_llamado1`
    FOREIGN KEY (`idPrimerLlamado`)
    REFERENCES `tempus`.`llamado` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mesa_examen_llamado2`
    FOREIGN KEY (`idSegundoLlamado`)
    REFERENCES `tempus`.`llamado` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`plan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`plan` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idAsignatura` INT NOT NULL,
  `idCarrera` VARCHAR(3) NOT NULL,
  `idMesaExamen` INT NULL,
  `anio` INT NOT NULL,
  `fechaCreacion` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `carrera_asignatura_UNIQUE` (`idCarrera` ASC, `idAsignatura` ASC),
  INDEX `fk_cursada_carrera1_idx` (`idCarrera` ASC),
  INDEX `fk_cursada_asignatura1_idx` (`idAsignatura` ASC),
  INDEX `fk_plan_mesa_examen1_idx` (`idMesaExamen` ASC),
  CONSTRAINT `fk_cursada_carrera1`
    FOREIGN KEY (`idCarrera`)
    REFERENCES `tempus`.`carrera` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cursada_asignatura1`
    FOREIGN KEY (`idAsignatura`)
    REFERENCES `tempus`.`asignatura` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_plan_mesa_examen1`
    FOREIGN KEY (`idMesaExamen`)
    REFERENCES `tempus`.`mesa_examen` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`clase`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`clase` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idAula` INT NOT NULL,
  `idPlan` INT NOT NULL,
  `diaSemana` ENUM('1', '2', '3', '4', '5', '6', '7') NOT NULL DEFAULT '1',
  `horaInicio` TIME NOT NULL,
  `horaFin` TIME NOT NULL,
  `fechaEdicion` DATETIME NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `plan_diaSemana_UNIQUE` (`idPlan` ASC, `diaSemana` ASC),
  INDEX `fk_clase_aula1_idx` (`idAula` ASC),
  INDEX `fk_clase_plan1_idx` (`idPlan` ASC),
  CONSTRAINT `fk_clase_aula1`
    FOREIGN KEY (`idAula`)
    REFERENCES `tempus`.`aula` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_clase_plan1`
    FOREIGN KEY (`idPlan`)
    REFERENCES `tempus`.`plan` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`rol`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`rol` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`permiso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`permiso` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`usuario` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `nombre` VARCHAR(255) NOT NULL,
  `metodoLogin` VARCHAR(25) NOT NULL,
  `estado` ENUM('Activo', 'Inactivo') NOT NULL DEFAULT 'Activo',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`rol_permiso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`rol_permiso` (
  `rol_id` INT NOT NULL,
  `permiso_id` INT NOT NULL,
  PRIMARY KEY (`rol_id`, `permiso_id`),
  INDEX `fk_rol_has_permiso_permiso1_idx` (`permiso_id` ASC),
  INDEX `fk_rol_has_permiso_rol1_idx` (`rol_id` ASC),
  CONSTRAINT `fk_rol_has_permiso_rol1`
    FOREIGN KEY (`rol_id`)
    REFERENCES `tempus`.`rol` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rol_has_permiso_permiso1`
    FOREIGN KEY (`permiso_id`)
    REFERENCES `tempus`.`permiso` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`rol_usuario`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `tempus`.`rol_usuario` (
  `rol_id` INT NOT NULL,
  `usuario_id` INT NOT NULL,
  PRIMARY KEY (`rol_id`, `usuario_id`),
  INDEX `fk_rol_has_usuario_usuario1_idx` (`usuario_id` ASC),
  INDEX `fk_rol_has_usuario_rol1_idx` (`rol_id` ASC),
  CONSTRAINT `fk_rol_has_usuario_rol1`
    FOREIGN KEY (`rol_id`)
    REFERENCES `tempus`.`rol` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rol_has_usuario_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `tempus`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`usuario_manual`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`usuario_manual` (
  `usuario_id` INT NOT NULL,
  `clave` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`usuario_id`),
  INDEX `fk_usuario_manual_usuario1_idx` (`usuario_id` ASC),
  CONSTRAINT `fk_usuario_manual_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `tempus`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tempus`.`usuario_google`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tempus`.`usuario_google` (
  `usuario_id` INT NOT NULL,
  `google_id` VARCHAR(255) NULL,
  `imagen` VARCHAR(500) NULL,
  PRIMARY KEY (`usuario_id`),
  INDEX `fk_usuario_google_usuario1_idx` (`usuario_id` ASC),
  CONSTRAINT `fk_usuario_google_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `tempus`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- View `tempus`.`vw_asignatura`
-- -----------------------------------------------------

create view vw_asignatura as 
SELECT a.id, a.nombreCorto, a.nombreLargo, (CASE WHEN c.carreras IS NULL THEN 0 ELSE c.carreras END) carreras 
FROM asignatura a
LEFT JOIN (SELECT idAsignatura, COUNT(idCarrera) carreras 
           FROM plan 
           GROUP BY idAsignatura) c ON c.idAsignatura = a.id;
		   
	
-- -----------------------------------------------------
-- View `tempus`.`vw_aula`
-- -----------------------------------------------------
	
create view vw_aula as
SELECT  a.id, 
        a.nombre, 
        a.sector, 
        (CASE WHEN c.clases IS NULL THEN 0 ELSE c.clases END) clases,
        (CASE WHEN l.llamados IS NULL THEN 0 ELSE l.llamados END) llamados
FROM aula a
LEFT JOIN (SELECT idAula, COUNT(*) clases FROM clase GROUP BY idAula) c ON c.idAula = a.id
LEFT JOIN (SELECT idAula, COUNT(*) llamados FROM llamado GROUP BY idAula) l ON l.idAula = a.id;		   

-- -----------------------------------------------------
-- View `tempus`.`vw_carrera`
-- -----------------------------------------------------

create view vw_carrera as
SELECT c.id, c.nombreCorto, c.nombreLargo, (CASE WHEN a.asignaturas IS NULL THEN 0 ELSE a.asignaturas END) asignaturas
FROM carrera c
LEFT JOIN (SELECT idCarrera, COUNT(idAsignatura) asignaturas
           FROM plan 
           GROUP BY idCarrera) a ON a.idCarrera = c.id;
		   
		   
-- -----------------------------------------------------
-- View `tempus`.`vw_cursada`
-- -----------------------------------------------------

create view vw_cursada as
SELECT 
	DISTINCT
    plan.id idPlan,
    plan.anio,
    carrera.id codigoCarrera,
    carrera.nombreCorto nombreCortoCarrera,
    carrera.nombreLargo nombreLargoCarrera,
    asignatura.nombreCorto nombreCortoAsignatura,
    asignatura.nombreLargo nombreLargoAsignatura,
    lunes.horaInicioLunes,
    lunes.horaFinLunes,
    lunes.sectorAulaLunes,
    lunes.nombreAulaLunes,
    lunes.fechaEdicionLunes,
    martes.horaInicioMartes,
    martes.horaFinMartes,
    martes.sectorAulaMartes,
    martes.nombreAulaMartes,
    martes.fechaEdicionMartes,
    miercoles.horaInicioMiercoles,
    miercoles.horaFinMiercoles,
    miercoles.sectorAulaMiercoles,
    miercoles.nombreAulaMiercoles,
    miercoles.fechaEdicionMiercoles,
    jueves.horaInicioJueves,
    jueves.horaFinJueves,
    jueves.sectorAulaJueves,
    jueves.nombreAulaJueves,
    jueves.fechaEdicionJueves,
    viernes.horaInicioViernes,
    viernes.horaFinViernes,
    viernes.sectorAulaViernes,
    viernes.nombreAulaViernes,
    viernes.fechaEdicionViernes,
    sabado.horaInicioSabado,
    sabado.horaFinSabado,
    sabado.sectorAulaSabado,
    sabado.nombreAulaSabado,
    sabado.fechaEdicionSabado
FROM plan 
INNER JOIN asignatura on asignatura.id = plan.idAsignatura
INNER JOIN carrera on carrera.id = plan.idCarrera
LEFT JOIN (SELECT 
                clase.idPlan, 
                clase.horaInicio horaInicioLunes, 
                clase.horaFin horaFinLunes, 
                aula.sector sectorAulaLunes, 
                aula.nombre nombreAulaLunes,
                clase.fechaEdicion fechaEdicionLunes
           FROM clase
           INNER JOIN aula on aula.id = clase.idAula AND clase.diaSemana = 1) lunes on lunes.idPlan = plan.id
LEFT JOIN (SELECT 
                clase.idPlan, 
                clase.horaInicio horaInicioMartes, 
                clase.horaFin horaFinMartes, 
                aula.sector sectorAulaMartes, 
                aula.nombre nombreAulaMartes,
                clase.fechaEdicion fechaEdicionMartes
           FROM clase
           INNER JOIN aula on aula.id = clase.idAula AND clase.diaSemana = 2) martes on martes.idPlan = plan.id
LEFT JOIN (SELECT 
                clase.idPlan, 
                clase.horaInicio horaInicioMiercoles, 
                clase.horaFin horaFinMiercoles, 
                aula.sector sectorAulaMiercoles, 
                aula.nombre nombreAulaMiercoles,
                clase.fechaEdicion fechaEdicionMiercoles
           FROM clase
           INNER JOIN aula on aula.id = clase.idAula AND clase.diaSemana = 3) miercoles on miercoles.idPlan = plan.id
LEFT JOIN (SELECT 
                clase.idPlan, 
                clase.horaInicio horaInicioJueves, 
                clase.horaFin horaFinJueves, 
                aula.sector sectorAulaJueves, 
                aula.nombre nombreAulaJueves,
                clase.fechaEdicion fechaEdicionJueves
           FROM clase
           INNER JOIN aula on aula.id = clase.idAula AND clase.diaSemana = 4) jueves on jueves.idPlan = plan.id
LEFT JOIN (SELECT 
                clase.idPlan, 
                clase.horaInicio horaInicioViernes, 
                clase.horaFin horaFinViernes, 
                aula.sector sectorAulaViernes, 
                aula.nombre nombreAulaViernes,
                clase.fechaEdicion fechaEdicionViernes
           FROM clase
           INNER JOIN aula on aula.id = clase.idAula AND clase.diaSemana = 5) viernes on viernes.idPlan = plan.id
LEFT JOIN (SELECT 
                clase.idPlan, 
                clase.horaInicio horaInicioSabado, 
                clase.horaFin horaFinSabado, 
                aula.sector sectorAulaSabado, 
                aula.nombre nombreAulaSabado,
                clase.fechaEdicion fechaEdicionSabado
           FROM clase
           INNER JOIN aula on aula.id = clase.idAula AND clase.diaSemana = 6) sabado on sabado.idPlan = plan.id
 WHERE 
 lunes.idPlan is not null OR
 martes.idPlan is not null OR
 miercoles.idPlan is not null OR
 jueves.idPlan is not null OR
 viernes.idPlan is not null OR
 sabado.idPlan is not null;		   
 
 
-- -----------------------------------------------------
-- View `tempus`.`vw_mesa_examen`
-- -----------------------------------------------------
 
create view vw_mesa_examen as
SELECT 
	pla.id idPlan,
    mex.id idMesaExamen,
    car.id codigoCarrera,
    car.nombreCorto nombreCortoCarrera,
    car.nombreLargo nombreLargoCarrera,
    asi.nombreCorto nombreCortoAsignatura,
    asi.nombreLargo nombreLargoAsignatura,
    apr.sector sectorAulaPrimerLlamado,
    apr.nombre nombreAulaPrimerLlamado,
    prl.estado estadoPrimerLlamado,
    prl.fecha fechaPrimerLlamado,
    prl.fechaEdicion fechaEdicionPrimerLlamado,
    prl.hora horaPrimerLlamado,
    ase.sector sectorAulaSegundoLlamado,
    ase.nombre nombreAulaSegundoLlamado,
    sel.estado estadoSegundoLlamado,
    sel.fecha fechaSegundoLlamado,
    sel.fechaEdicion fechaEdicionSegundoLlamado,
    sel.hora horaSegundoLlamado,
    pre.nombre nombrePresidente,
    vpr.nombre nombreVocalPrimero,
    vse.nombre nombreVocalSegundo,
    sup.nombre nombreSuplente,
    mex.fechaCreacion fechaCreacionMesaExamen,
    mex.observacion observacionMesaExamen
FROM plan pla
INNER JOIN asignatura asi on asi.id = pla.idAsignatura
INNER JOIN carrera car on car.id = pla.idCarrera
INNER JOIN mesa_examen mex on mex.id = pla.idMesaExamen
LEFT JOIN llamado prl on prl.id = mex.idPrimerLlamado
LEFT JOIN llamado sel on sel.id = mex.idSegundoLlamado
LEFT JOIN aula apr on apr.id = prl.idAula
LEFT JOIN aula ase on ase.id = sel.idAula
INNER JOIN tribunal tri ON tri.id = mex.idTribunal
INNER JOIN docente pre on pre.id = tri.idPresidente
INNER JOIN docente vpr on vpr.id = tri.idVocal1
LEFT  JOIN docente vse on vse.id = tri.idVocal2
LEFT  JOIN docente sup on sup.id = tri.idSuplente;


-- -----------------------------------------------------
-- View `tempus`.`vw_permiso`
-- -----------------------------------------------------

CREATE VIEW vw_permiso AS
SELECT p.id, p.nombre, (CASE WHEN r.roles IS NULL THEN 0 ELSE r.roles END) roles
FROM permiso p
LEFT JOIN 
	(SELECT permiso_id idPermiso, COUNT(*) roles
	FROM rol_permiso
	GROUP BY permiso_id) r ON r.idPermiso = p.id;

-- -----------------------------------------------------
-- View `tempus`.`vw_plan`
-- -----------------------------------------------------

create view vw_plan as
SELECT 
	p.id idPlan,
    a.id idAsignatura,
    a.nombreCorto nombreCortoAsignatura,
    a.nombreLargo nombreLargoAsignatura,
    c.id idCarrera,
    c.nombreCorto nombreCortoCarrera,
    c.nombreLargo nombreLargoCarrera,
    (CASE WHEN cl.clases IS NULL THEN 'No' ELSE 'Si' END) cursada,
    (CASE WHEN p.idMesaExamen IS NULL THEN 'No' ELSE 'Si' END) mesaExamen,
    p.anio,
    p.fechaCreacion
FROM plan p
INNER JOIN asignatura a ON a.id = p.idAsignatura
INNER JOIN carrera c ON c.id = p.idCarrera
LEFT JOIN (SELECT idPlan, COUNT(id) clases 
           FROM clase 
           GROUP BY idPlan) cl on cl.idPlan = p.id;

		   
-- -----------------------------------------------------
-- View `tempus`.`vw_rol`
-- -----------------------------------------------------
	   
CREATE VIEW vw_rol AS
SELECT r.id, 
  r.nombre, 
 (CASE WHEN u.usuarios IS NULL THEN 0 ELSE u.usuarios END) usuarios,
 (CASE WHEN p.permisos IS NULL THEN 0 ELSE p.permisos END) permisos
FROM rol r 
LEFT JOIN 
	(SELECT rol_id idRol, COUNT(*) usuarios 
	 FROM rol_usuario 
	 GROUP BY rol_id) u ON u.idRol = r.id 
LEFT JOIN 
	(SELECT rol_id idRol, COUNT(*) permisos 
	 FROM rol_permiso 
	 GROUP BY rol_id) p ON p.idRol = r.id; 		   

	 
-- -----------------------------------------------------
-- View `tempus`.`vw_usuario`
-- -----------------------------------------------------

create view vw_usuario as
SELECT u.id, u.email, u.nombre nombreUsuario, u.metodoLogin, u.estado, r.nombre nombreRol 
FROM usuario u
INNER JOIN rol_usuario ru ON ru.usuario_id = u.id
INNER JOIN rol r ON r.id = ru.rol_id;	 


-- -----------------------------------------------------
-- View `tempus`.`vw_informe`
-- -----------------------------------------------------

create view vw_informe as
SELECT 'ASIGNATURAS' collate utf8mb4_general_ci as modulo, 'Total de asignaturas' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM asignatura
UNION ALL
SELECT 'ASIGNATURAS' collate utf8mb4_general_ci as modulo, 'Total de asignaturas sin carrera asociada' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM vw_asignatura WHERE carreras = 0
UNION ALL
SELECT 'AULAS' collate utf8mb4_general_ci as modulo, 'Total de aulas' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM aula
UNION ALL
SELECT 'AULAS' collate utf8mb4_general_ci as modulo, 'Total de aulas sin clase asociada' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM vw_aula WHERE clases = 0
UNION ALL
SELECT 'AULAS' collate utf8mb4_general_ci as modulo, 'Total de aulas sin llamado asociado' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM vw_aula WHERE llamados = 0
UNION ALL
SELECT 'CARRERAS' collate utf8mb4_general_ci as modulo, 'Total de carreras' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM carrera
UNION ALL
SELECT 'CARRERAS' collate utf8mb4_general_ci as modulo, 'Total de carreras sin asignatura asociada' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM vw_carrera WHERE asignaturas = 0
UNION ALL
SELECT 'CURSADAS' collate utf8mb4_general_ci as modulo, 'Total de cursadas' collate utf8mb4_general_ci as informe, COUNT(DISTINCT idPlan) cantidad FROM clase
UNION ALL
SELECT 'MESAS DE EXAMEN' collate utf8mb4_general_ci as modulo, 'Total de mesas de examen' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM mesa_examen
UNION ALL
SELECT 'MESAS DE EXAMEN' collate utf8mb4_general_ci as modulo, 'Total de mesas de examen creadas los ultimos siete días' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM `mesa_examen` WHERE DATE_FORMAT(fechaCreacion, "%Y-%m-%d") >= DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -7 DAY), "%Y-%m-%d")
UNION ALL
SELECT 'MESAS DE EXAMEN' collate utf8mb4_general_ci as modulo, 'Total de mesas de examen del día' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM vw_mesa_examen WHERE fechaPrimerLlamado = DATE_FORMAT(NOW(), "%Y-%m-%d") OR fechaSegundoLlamado = DATE_FORMAT(NOW(), "%Y-%m-%d")
UNION ALL
SELECT 'PERMISOS' collate utf8mb4_general_ci as modulo, 'Total de permisos' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM permiso
UNION ALL
SELECT 'ROLES' collate utf8mb4_general_ci as modulo, 'Total de roles' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM rol
UNION ALL
SELECT 'USUARIOS' collate utf8mb4_general_ci as modulo, 'Total de usuarios' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM usuario
UNION ALL
SELECT 'USUARIOS' collate utf8mb4_general_ci as modulo, 'Total de usuarios activos' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM usuario WHERE estado = 'Activo'
UNION ALL
SELECT 'USUARIOS' collate utf8mb4_general_ci as modulo, 'Total de usuarios inactivos' collate utf8mb4_general_ci as informe, COUNT(*) cantidad FROM usuario WHERE estado = 'Inactivo';
		   
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
